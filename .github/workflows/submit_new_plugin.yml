name: submit-new-plugin
on:
  issues:
    types: [opened]
jobs:
  precheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: precheck-steps
        run: |

          touch checklog.txt
          isOK=1

          # 1.:NOT OK Check for illegal characters (allow only alphanumeric GH user+repo+branch names)

          # 2.:OK Check if README.md or PLUGIN.md is present on the specified repo
          status_code=$(curl --write-out %{http_code} --silent --output /dev/null https://api.github.com/repos/Duet3D/DuetSoftwareFramework/contents/README.md)

          res=$(if [[ "$status_code" = 200 ]]; then echo 1; else echo 0; fi)
          echo README.md: $res >> checklog.txt
          isOK=$(($isOK*$res))

          # 3.:OK Make sure there is at least one release with at least one ZIP file
          url=$(curl https://api.github.com/repos/Duet3D/InputShapingPlugin/releases | jq .[0]."assets"[0]."browser_download_url" | sed 's/"//g')
          #if url exists, then at least one asset is there
          ext=$(echo $url | rev | cut -d'.' -f 1 |rev)
          #check if ext is zip to confirm it's a zip
          res=$(if [[ "$ext" = zip ]]; then echo 1; else echo 0; fi)
          echo Release: $res >> checklog.txt
          isOK=$(($isOK*$res))

          # 4.:OK Download latest ZIP bundle
          wget $url -O asset.zip
          unzip asset.zip -d assetunzipped

          # 5.:OK Make sure plugin.json exists
          res=$((ls assetunzipped/plugin.json >> /dev/null 2>&1  && echo 1) || echo 0)
          echo plugin.json check 1: $res >> checklog.txt
          isOK=$(($isOK*$res))

          # 6.:OK Ensure properties id, name, author are present. Validate them as specified in https://github.com/Duet3D/DuetWebControl/blob/master/src/plugins/manifest.js
          plugin_id=$(cat assetunzipped/plugin.json | jq ."id" | sed 's/"//g') #Check if less than 32 characters
          plugin_id_n=$(echo $plugin_id | awk '{print length}') #Check if less than 32 characters
          res=$(if [[ "$plugin_id" != null ]]&&[[ "$plugin_id_n" < 32 ]]; then echo 1; else echo 0; fi)
          echo plugin.json id: $res >> checklog.txt
          isOK=$(($isOK*$res))

          plugin_name=$(cat assetunzipped/plugin.json | jq ."name" | sed 's/"//g') #Check if less than 64 characters
          plugin_name_n=$(echo $plugin_name | awk '{print length}') #Check if less than 64 characters
          res=$(if [[ "$plugin_name" != null ]]&&[[ "$plugin_name_n" < 64 ]]; then echo 1; else echo 0; fi)
          echo plugin.json name: $res >> checklog.txt 
          isOK=$(($isOK*$res))

          plugin_author=$(cat assetunzipped/plugin.json | jq ."author" | sed 's/"//g') #Check if empty
          plugin_author_n=$(echo $plugin_author | awk '{print length}') #Check if empty
          res=$(if [[ "$plugin_author" != null ]]&&[[ "$plugin_author_n" > 0 ]]; then echo 1; else echo 0; fi)
          echo plugin.json author: $res >> checklog.txt
          isOK=$(($isOK*$res))

          # 7.:NOT OK Check if at least one "version" dependency is present [dwcVersion, sbcDSfVersion, rrfVersion] and that each value starts with a number

          txt="Log:"
          while IFS= read -r line; do
            echo $line
            txt="$txt \n $line"
          done < checklog.txt
    
          response="{"\"body"\": "\"$txt"\"}"

          curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/Duet3D/PluginRepository/issues/${{ github.event.issue.number }}/comments \
            -d "$response"

          echo $isOK

          if [[ "$isOK" = 1 ]]; then curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/Duet3D/PluginRepository/issues/${{ github.event.issue.number }}/labels -d '{"labels":["ready-for-approval"]}'; else exit 0; fi

                      
  plugin-submission:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: stefanbuck/github-issue-praser@v2
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/PluginSubmission.yml

      - run: echo '${{ steps.issue-parser.outputs.jsonString }}' > issue.json

      - name: Fetch and create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo test 
          echo $(ls -a)

          mv issue.json src/plugins/
          cd src/plugins 


          author=$(cat issue.json | jq ."PluginAuthor" | sed 's/"//g')
          repo=$(cat issue.json | jq ."PluginRepo" | sed 's/"//g')
          branch=$(cat issue.json | jq ."PluginBranch" | sed 's/"//g')

          title=$(cat issue.json | jq ."PluginTitle")
          abstract=$(cat issue.json | jq ."PluginAbstract")

          branchName=submission/$(date +"%y%m%d")$repo
          commituser=Duet3D


          latest_version=$(curl https://api.github.com/repos/$author/$repo/releases | jq .[0]."tag_name")
          release_date=$(curl https://api.github.com/repos/$author/$repo/releases | jq .[0]."published_at")
          license=$(curl https://raw.githubusercontent.com/$author/$repo/$branch/plugin.json | jq ."license")
          download_count=$(curl https://api.github.com/repos/$author/$repo/releases | jq .[]."assets"[0]."download_count" | paste -sd+ | bc)


          wget https://raw.githubusercontent.com/$author/$repo/$branch/README.md -O $repo.md

          touch frontmatter.txt
          echo --- >> frontmatter.txt
          echo title: $title >> frontmatter.txt
          echo abstract: $abstract >> frontmatter.txt
          echo author: $author >> frontmatter.txt
          echo repo: $repo >> frontmatter.txt
          echo branch: $branch >> frontmatter.txt
          echo latest_version: $latest_version >> frontmatter.txt
          echo release_date: $release_date >> frontmatter.txt
          echo license: $license >> frontmatter.txt
          echo download_count: $download_count >> frontmatter.txt
          echo tags: >> frontmatter.txt
          curl https://raw.githubusercontent.com/$author/$repo/$branch/plugin.json | jq ."tags"[] | awk '{print "\t - ",$0}' >> frontmatter.txt 
          echo --- >> frontmatter.txt

          i=1
          j='i'
          while IFS= read -r line; do
            sed -i "$i$j$line" $repo.md
            i=`expr $i + 1`
          done < frontmatter.txt

          rm frontmatter.txt
          rm issue.json
          
          git config --global user.name "yasasw"
          git config --global user.email "yasas.wijetilake@gmail.com"
          git checkout -b $branchName
          git add $repo.md
          git commit -m "Updating plugin $repo.md"
          git push -u origin $branchName

          hub pull-request -m "[${{ github.event.issue.number }}]-$branchName" -l plugin-submission --base $commituser:master --head $commituser:$branchName