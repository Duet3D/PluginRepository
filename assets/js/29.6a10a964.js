(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{304:function(e,a,t){"use strict";t.r(a);var n=t(13),s=Object(n.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"e3d-revo-tool-configuration-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#e3d-revo-tool-configuration-plugin"}},[e._v("#")]),e._v(" E3D Revo Tool Configuration Plugin")]),e._v(" "),a("p",[e._v("This plugin provides RepRapFirmware macro files for persistent storage of Revo tool configurations (variable nozzle diameters).\nIt can be used both in SBC and standalone mode, however currently only a single tool is supported (not suitable for tool changers).\nRepRapFirmware 3.4 or newer is required to use them.")]),e._v(" "),a("p",[e._v("This script set is licensed under the terms of the MIT license. Use at your own risk.")]),e._v(" "),a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),a("p",[e._v("To install this plugin, open DWC, go to "),a("code",[e._v("Settings -> Plugins -> External Plugins")]),e._v(' and click on "Install Plugin".\nThen select the plugin ZIP file and confirm the following steps.')]),e._v(" "),a("p",[e._v("Once installed, remove your existing tool defintion from "),a("code",[e._v("config.g")]),e._v(" (typically the "),a("code",[e._v("Tools")]),e._v(" section) but write down the configured heater, fan, and extruder numbers mapped to your existing tool (typically "),a("code",[e._v("D0")]),e._v(", "),a("code",[e._v("H1")]),e._v(", "),a("code",[e._v("F0")]),e._v(").")]),e._v(" "),a("p",[e._v("Instead of this section, you should invoke "),a("code",[e._v("revo/config.g")]),e._v(" with the corresponding parameters:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('; Revo tool config\nM98 P"revo/config.g" D0 H1 F0\n')])])]),a("p",[e._v("This will restore the last configured Revo insert on the next restart of the firmware.")]),e._v(" "),a("h2",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("p",[e._v("Upon installation, you can see a new "),a("code",[e._v("Revo")]),e._v(" directory in the "),a("code",[e._v("Macros")]),e._v(" list which contains the following items:")]),e._v(" "),a("ul",[a("li",[e._v("0.15mm Nozzle (Pink)")]),e._v(" "),a("li",[e._v("0.25mm Nozzle (Yellow)")]),e._v(" "),a("li",[e._v("0.4mm Nozzle (Red)")]),e._v(" "),a("li",[e._v("0.6mm Nozzle (Blue)")]),e._v(" "),a("li",[e._v("0.8mm Nozzle (Green)")])]),e._v(" "),a("p",[e._v("Using these macros you can reconfigure your Revo hotend whenever you've changed the nozzle insert.\nChanges are saved permantently on the SD card for your convenience and the last configuration is restored on reboot.")]),e._v(" "),a("h3",{attrs:{id:"global-variable-nozzlediameter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global-variable-nozzlediameter"}},[e._v("#")]),e._v(" Global variable nozzleDiameter")]),e._v(" "),a("p",[e._v("In order to fine-tune filament instances, you can reference "),a("code",[e._v("global.nozzleDiameter")]),e._v(" in your filament configuration macros to set up the right PA and firmware retraction parameters.")]),e._v(" "),a("h2",{attrs:{id:"demo-configuration-for-custom-filaments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#demo-configuration-for-custom-filaments"}},[e._v("#")]),e._v(" Demo configuration for custom filaments")]),e._v(" "),a("p",[e._v("Here my demo configuration for a PETG filament definition that uses different PA and firmware retraction values for the 0.4 and 0.8mm nozzles.\nThe corresponding "),a("code",[e._v("load.g")]),e._v(" script uses StallGuard when loading a filament. Bear in mind that these files are only demos and further fine-tuning may be required for your setup.")]),e._v(" "),a("h3",{attrs:{id:"main-config-g"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#main-config-g"}},[e._v("#")]),e._v(" Main config.g")]),e._v(" "),a("p",[e._v("At the end of config.g, you can add something like")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('; Filament config\nglobal filamentType = ""\nT0\nM703\n')])])]),a("p",[e._v("to restore the last filament.")]),e._v(" "),a("h3",{attrs:{id:"filament-config-g"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filament-config-g"}},[e._v("#")]),e._v(" Filament config.g")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('set global.filamentType = "PETG"\nM221 D0 S87\n\nif global.nozzleDiameter == 0.4\n  M572 D0 S0.55\n  M207 P0 S4 F3600 Z0\nelif global.nozzleDiameter == 0.8\n  M572 D0 S0.325\n  M207 P0 S5 F3000 Z0\nelse\n  M572 D0 S0\n  M207 P0 S5 F3000 Z0\n  echo "Warning: Unsupported nozzle diameter"\n')])])]),a("h3",{attrs:{id:"filament-load-g"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filament-load-g"}},[e._v("#")]),e._v(" Filament load.g")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('M98 P"load.g"\n')])])]),a("h3",{attrs:{id:"filament-unload-g"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filament-unload-g"}},[e._v("#")]),e._v(" Filament unload.g")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('M98 P"unload.g" T160\n')])])]),a("h3",{attrs:{id:"sys-check-filament-g"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sys-check-filament-g"}},[e._v("#")]),e._v(" /sys/check-filament.g")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if global.filamentType != param.F\n  abort "Incorrect filament! Expected " ^ param.F ^ " but " ^ global.filamentType ^ " is loaded."\n')])])]),a("h3",{attrs:{id:"sys-load-g"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sys-load-g"}},[e._v("#")]),e._v(" /sys/load.g")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("; load filament using SG at 75% motor current\nT0\nM83\nM913 E75\nM302 P1\nG1 H1 E750 F1800 \nM913 E100\nM302 P0\n\n")])])]),a("h3",{attrs:{id:"sys-unload-g"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sys-unload-g"}},[e._v("#")]),e._v(" /sys/unload.g")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("; heat up to the given temperature if necessary (as passed via the T parameter)\nvar hadToHeat = false\nif sensors.analog[1].lastReading < param.T\n  set var.hadToHeat = true\n  T0\n  M568 S{param.T}\n  M116\n\n; retract 500mm of filament\nG1 E-500 F6000\n\n; turn off the nozzle again if we enabled it before\nif var.hadToHeat == true\n  M568 S0\n")])])]),a("h3",{attrs:{id:"sample-start-g-code-prusaslicer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-start-g-code-prusaslicer"}},[e._v("#")]),e._v(" Sample start G-code (PrusaSlicer)")]),e._v(" "),a("p",[e._v("To check if the right filament and nozzle is used, you can run these commands as part of your slicer start G-code:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('M98 P"check-filament.g" F"[filament_type]"\nM98 P"revo/check-nozzle.g" S0.6\n')])])]),a("p",[e._v("If either the loaded filament type or the nozzle widths (0.6mm in this case) don't match, the print is aborted immediately.\nIn the case of the previously mentioned PETG filament, make sure to set "),a("code",[e._v("Filament type")]),e._v(" in the slicer to "),a("code",[e._v("PETG")]),e._v(".")])])}),[],!1,null,null,null);a.default=s.exports}}]);